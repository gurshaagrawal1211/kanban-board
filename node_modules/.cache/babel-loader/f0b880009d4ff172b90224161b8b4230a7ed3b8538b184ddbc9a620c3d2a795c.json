{"ast":null,"code":"var _jsxFileName = \"D:\\\\kanban-board\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect, createContext } from 'react';\n// import KanbanBoard from './KanbanBoard';\nimport KanbanBoard from './components/KanbanBoard/KanbanBoard';\nimport './App.css';\nimport DisplayButton from './components/DisplayButton/DisplayButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const KanbanContext = /*#__PURE__*/createContext();\nconst App = () => {\n  _s();\n  const [data, setData] = useState({\n    tickets: [],\n    users: []\n  });\n  const [groupingOption, setGroupingOption] = useState('status');\n  const [sortingOption, setSortingOption] = useState('priority');\n  const [displayOption, setDisplayOption] = useState(null); // Default to null (no option selected)\n  const [statusOptions, setStatusOptions] = useState(['Todo', 'In Progress', 'Done']);\n  const [groupOptions, setGroupOptions] = useState(['Group Option 1', 'Group Option 2', 'Group Option 3']);\n  useEffect(() => {\n    // Fetch data from the API and setData\n    // This is a placeholder, you should replace it with your actual API call\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://api.quicksell.co/v1/internal/frontend-assignment ');\n        const jsonData = await response.json();\n        setData(jsonData);\n        console.log(jsonData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleStatusOptionClick = statusOption => {\n    // Handle the selected status option\n    console.log('Selected Status Option:', statusOption);\n  };\n  const handleGroupOptionClick = groupOption => {\n    // Handle the selected group option\n    console.log('Selected Group Option:', groupOption);\n  };\n  const contextValue = {\n    data,\n    groupingOption,\n    setGroupingOption,\n    sortingOption,\n    setSortingOption\n  };\n  return /*#__PURE__*/_jsxDEV(KanbanContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setDisplayOption('status'),\n          children: \"Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setDisplayOption('group'),\n          children: \"Group\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), displayOption === 'status' && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Status Options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"dropbtn\",\n            children: \"Select Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown-content\",\n            children: statusOptions.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleStatusOptionClick(option),\n              children: option\n            }, option, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), displayOption === 'group' && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Group Options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"dropbtn\",\n            children: \"Select Group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown-content\",\n            children: groupOptions.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleGroupOptionClick(option),\n              children: option\n            }, option, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(KanbanBoard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 6\n  }, this);\n};\n_s(App, \"7ULm01KM8Ze2RqeIJjQDuTdA9vs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","createContext","KanbanBoard","DisplayButton","jsxDEV","_jsxDEV","KanbanContext","App","_s","data","setData","tickets","users","groupingOption","setGroupingOption","sortingOption","setSortingOption","displayOption","setDisplayOption","statusOptions","setStatusOptions","groupOptions","setGroupOptions","fetchData","response","fetch","jsonData","json","console","log","error","handleStatusOptionClick","statusOption","handleGroupOptionClick","groupOption","contextValue","Provider","value","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","option","_c","$RefreshReg$"],"sources":["D:/kanban-board/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect, createContext } from 'react';\n// import KanbanBoard from './KanbanBoard';\nimport KanbanBoard from './components/KanbanBoard/KanbanBoard';\nimport './App.css';\nimport DisplayButton from './components/DisplayButton/DisplayButton';\n\nexport const KanbanContext = createContext();\n\nconst App = () => {\n  const [data, setData] = useState({\n    tickets: [],\n    users: [],\n  });\n  const [groupingOption, setGroupingOption] = useState('status');\n  const [sortingOption, setSortingOption] = useState('priority');\n  const [displayOption, setDisplayOption] = useState(null); // Default to null (no option selected)\n  const [statusOptions, setStatusOptions] = useState(['Todo', 'In Progress', 'Done']);\n  const [groupOptions, setGroupOptions] = useState(['Group Option 1', 'Group Option 2', 'Group Option 3']);\n\n\n  useEffect(() => {\n    // Fetch data from the API and setData\n    // This is a placeholder, you should replace it with your actual API call\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://api.quicksell.co/v1/internal/frontend-assignment ');\n        const jsonData = await response.json();\n        setData(jsonData);\n        console.log(jsonData)\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleStatusOptionClick = (statusOption) => {\n    // Handle the selected status option\n    console.log('Selected Status Option:', statusOption);\n  };\n\n  const handleGroupOptionClick = (groupOption) => {\n    // Handle the selected group option\n    console.log('Selected Group Option:', groupOption);\n  };\n\n  const contextValue = {\n    data,\n    groupingOption,\n    setGroupingOption,\n    sortingOption,\n    setSortingOption,\n  };\n\n  return (\n     <KanbanContext.Provider value={contextValue}>\n       <div className=\"app\">\n        <header>\n          <button onClick={() => setDisplayOption('status')}>Status</button>\n          <button onClick={() => setDisplayOption('group')}>Group</button>\n        </header>\n\n        {displayOption === 'status' && (\n          <div>\n            <h2>Status Options</h2>\n            {/* Render dropdown button with status options */}\n            <div className=\"dropdown\">\n              <button className=\"dropbtn\">Select Status</button>\n              <div className=\"dropdown-content\">\n                {statusOptions.map((option) => (\n                  <button key={option} onClick={() => handleStatusOptionClick(option)}>\n                    {option}\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {displayOption === 'group' && (\n          <div>\n            <h2>Group Options</h2>\n            {/* Render dropdown button with group options */}\n            <div className=\"dropdown\">\n              <button className=\"dropbtn\">Select Group</button>\n              <div className=\"dropdown-content\">\n                {groupOptions.map((option) => (\n                  <button key={option} onClick={() => handleGroupOptionClick(option)}>\n                    {option}\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n\n        <KanbanBoard />\n      </div>\n     </KanbanContext.Provider>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}