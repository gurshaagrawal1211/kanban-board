{"ast":null,"code":"// KanbanBoard.js\nimport React,{useContext}from'react';// import KanbanColumn from './KanbanColumn';\nimport KanbanColumn from'../KanbanColumn/KanbanColumn';import'../KanbanBoard/KanbanBoard.css';import{KanbanContext}from'../../App';import{jsx as _jsx}from\"react/jsx-runtime\";const KanbanBoard=()=>{const{data,groupingOption,orderingOption}=useContext(KanbanContext);const{tickets,users}=data;// Implement logic to group and sort tickets based on options\nconst groupAndSortTickets=()=>{// Group tickets based on the current grouping option\nconst groupedTickets=tickets.reduce((grouped,ticket)=>{let groupKey;if(groupingOption==='user'){groupKey=ticket.userId||'Unknown User';// Use 'Unknown User' if userId is missing\n}else{groupKey=ticket[groupingOption];}grouped[groupKey]=grouped[groupKey]||[];grouped[groupKey].push(ticket);return grouped;},{});// Sort tickets within each group based on the current sorting option\nObject.keys(groupedTickets).forEach(groupKey=>{const group=groupedTickets[groupKey];group.sort((a,b)=>{switch(orderingOption){case'priority':const priorityA=parseInt(a.priority,10);const priorityB=parseInt(b.priority,10);return priorityB-priorityA;case'title':// Sort by title in ascending order\nreturn a.title.localeCompare(b.title);default:return 0;// Default to no sorting\n}});});return groupedTickets;};// Get the grouped and sorted tickets based on the current options\nconst groupedAndSortedTickets=groupAndSortTickets();const todoTickets=tickets.filter(ticket=>ticket.status==='Todo');const inProgressTickets=tickets.filter(ticket=>ticket.status==='In progress');const doneTickets=tickets.filter(ticket=>ticket.status==='Done');return/*#__PURE__*/_jsx(\"div\",{className:\"kanban-board\",children:Object.entries(groupedAndSortedTickets).map(_ref=>{let[groupTitle,groupTickets]=_ref;return/*#__PURE__*/_jsx(KanbanColumn,{title:groupTitle,tickets:groupTickets,users:users,groupingOption:groupingOption},groupTitle);})});};export default KanbanBoard;","map":{"version":3,"names":["React","useContext","KanbanColumn","KanbanContext","jsx","_jsx","KanbanBoard","data","groupingOption","orderingOption","tickets","users","groupAndSortTickets","groupedTickets","reduce","grouped","ticket","groupKey","userId","push","Object","keys","forEach","group","sort","a","b","priorityA","parseInt","priority","priorityB","title","localeCompare","groupedAndSortedTickets","todoTickets","filter","status","inProgressTickets","doneTickets","className","children","entries","map","_ref","groupTitle","groupTickets"],"sources":["D:/kanban-board/src/components/KanbanBoard/KanbanBoard.jsx"],"sourcesContent":["// KanbanBoard.js\r\nimport React, { useContext } from 'react';\r\n// import KanbanColumn from './KanbanColumn';\r\nimport KanbanColumn from '../KanbanColumn/KanbanColumn';\r\nimport '../KanbanBoard/KanbanBoard.css'\r\n\r\n\r\nimport { KanbanContext } from '../../App';\r\n\r\nconst KanbanBoard = () => {\r\n  const { data, groupingOption, orderingOption } = useContext(KanbanContext);\r\n  const { tickets, users } = data;\r\n\r\n  \r\n  // Implement logic to group and sort tickets based on options\r\n  const groupAndSortTickets = () => {\r\n\r\n   \r\n    // Group tickets based on the current grouping option\r\n    const groupedTickets = tickets.reduce((grouped, ticket) => {\r\n       let groupKey;\r\n    if (groupingOption === 'user') {\r\n      groupKey = ticket.userId || 'Unknown User'; // Use 'Unknown User' if userId is missing\r\n      \r\n    } else {\r\n      groupKey = ticket[groupingOption];\r\n    }\r\n      grouped[groupKey] = grouped[groupKey] || [];\r\n      grouped[groupKey].push(ticket);\r\n      return grouped;\r\n    }, {});\r\n\r\n    // Sort tickets within each group based on the current sorting option\r\n   Object.keys(groupedTickets).forEach((groupKey) => {\r\n      const group = groupedTickets[groupKey];\r\n      group.sort((a, b) => {\r\n        switch (orderingOption) {\r\n          case 'priority':\r\n            const priorityA = parseInt(a.priority, 10);\r\n            const priorityB = parseInt(b.priority, 10);\r\n\r\n            return priorityB - priorityA;\r\n          case 'title':\r\n            // Sort by title in ascending order\r\n            return a.title.localeCompare(b.title);\r\n          default:\r\n            return 0; // Default to no sorting\r\n        }\r\n      });\r\n    });\r\n\r\n    return groupedTickets;\r\n  };\r\n\r\n  // Get the grouped and sorted tickets based on the current options\r\n  const groupedAndSortedTickets = groupAndSortTickets();\r\n\r\n\r\n  const todoTickets = tickets.filter((ticket) => ticket.status === 'Todo');\r\n  const inProgressTickets = tickets.filter((ticket) => ticket.status === 'In progress');\r\n  const doneTickets = tickets.filter((ticket) => ticket.status === 'Done');\r\n  return (\r\n    <div className=\"kanban-board\">\r\n      {/* Render columns based on grouped and sorted tickets */}\r\n      {Object.entries(groupedAndSortedTickets).map(([groupTitle, groupTickets]) => (\r\n        <KanbanColumn key={groupTitle} title={groupTitle} tickets={groupTickets} users={users} groupingOption={groupingOption} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KanbanBoard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}