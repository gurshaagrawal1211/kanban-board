{"ast":null,"code":"var _jsxFileName = \"D:\\\\kanban-board\\\\src\\\\components\\\\KanbanBoard\\\\KanbanBoard.jsx\",\n  _s = $RefreshSig$();\n// KanbanBoard.js\nimport React, { useContext } from 'react';\n// import KanbanColumn from './KanbanColumn';\nimport KanbanColumn from '../KanbanColumn/KanbanColumn';\nimport '../KanbanBoard/KanbanBoard.css';\nimport { KanbanContext } from '../../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KanbanBoard = () => {\n  _s();\n  const {\n    data,\n    groupingOption,\n    orderingOption\n  } = useContext(KanbanContext);\n  const {\n    tickets,\n    users\n  } = data;\n\n  // Implement logic to group and sort tickets based on options\n  const groupAndSortTickets = () => {\n    console.log('Grouping and sorting tickets...');\n    console.log('Current sorting option:', orderingOption);\n    // Group tickets based on the current grouping option\n    const groupedTickets = tickets.reduce((grouped, ticket) => {\n      const groupKey = ticket[groupingOption];\n      grouped[groupKey] = grouped[groupKey] || [];\n      grouped[groupKey].push(ticket);\n      return grouped;\n    }, {});\n\n    // Sort tickets within each group based on the current sorting option\n    Object.keys(groupedTickets).forEach(groupKey => {\n      const group = groupedTickets[groupKey];\n      group.sort((a, b) => {\n        switch (orderingOption) {\n          case 'priority':\n            const priorityA = parseInt(a.priority, 10);\n            const priorityB = parseInt(b.priority, 10);\n            return priorityB - priorityA;\n          case 'title':\n            // Sort by title in ascending order\n            return a.title.localeCompare(b.title);\n          default:\n            return 0;\n          // Default to no sorting\n        }\n      });\n    });\n\n    return groupedTickets;\n  };\n\n  // Get the grouped and sorted tickets based on the current options\n  const groupedAndSortedTickets = groupAndSortTickets();\n  const todoTickets = tickets.filter(ticket => ticket.status === 'Todo');\n  const inProgressTickets = tickets.filter(ticket => ticket.status === 'In progress');\n  const doneTickets = tickets.filter(ticket => ticket.status === 'Done');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"kanban-board\",\n    children: Object.entries(groupedAndSortedTickets).map(([groupTitle, groupTickets]) => /*#__PURE__*/_jsxDEV(KanbanColumn, {\n      title: groupTitle,\n      tickets: groupTickets,\n      users: users\n    }, groupTitle, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(KanbanBoard, \"HpK3TV/XYPW3GP7NEH1L65cTUJY=\");\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useContext","KanbanColumn","KanbanContext","jsxDEV","_jsxDEV","KanbanBoard","_s","data","groupingOption","orderingOption","tickets","users","groupAndSortTickets","console","log","groupedTickets","reduce","grouped","ticket","groupKey","push","Object","keys","forEach","group","sort","a","b","priorityA","parseInt","priority","priorityB","title","localeCompare","groupedAndSortedTickets","todoTickets","filter","status","inProgressTickets","doneTickets","className","children","entries","map","groupTitle","groupTickets","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/kanban-board/src/components/KanbanBoard/KanbanBoard.jsx"],"sourcesContent":["// KanbanBoard.js\r\nimport React, { useContext } from 'react';\r\n// import KanbanColumn from './KanbanColumn';\r\nimport KanbanColumn from '../KanbanColumn/KanbanColumn';\r\nimport '../KanbanBoard/KanbanBoard.css'\r\n\r\n\r\nimport { KanbanContext } from '../../App';\r\n\r\nconst KanbanBoard = () => {\r\n  const { data, groupingOption, orderingOption } = useContext(KanbanContext);\r\n  const { tickets, users } = data;\r\n\r\n  \r\n  // Implement logic to group and sort tickets based on options\r\n  const groupAndSortTickets = () => {\r\n\r\n    console.log('Grouping and sorting tickets...');\r\n    console.log('Current sorting option:', orderingOption);\r\n    // Group tickets based on the current grouping option\r\n    const groupedTickets = tickets.reduce((grouped, ticket) => {\r\n      const groupKey = ticket[groupingOption];\r\n      grouped[groupKey] = grouped[groupKey] || [];\r\n      grouped[groupKey].push(ticket);\r\n      return grouped;\r\n    }, {});\r\n\r\n    // Sort tickets within each group based on the current sorting option\r\n   Object.keys(groupedTickets).forEach((groupKey) => {\r\n      const group = groupedTickets[groupKey];\r\n      group.sort((a, b) => {\r\n        switch (orderingOption) {\r\n          case 'priority':\r\n            const priorityA = parseInt(a.priority, 10);\r\n            const priorityB = parseInt(b.priority, 10);\r\n\r\n            return priorityB - priorityA;\r\n          case 'title':\r\n            // Sort by title in ascending order\r\n            return a.title.localeCompare(b.title);\r\n          default:\r\n            return 0; // Default to no sorting\r\n        }\r\n      });\r\n    });\r\n\r\n    return groupedTickets;\r\n  };\r\n\r\n  // Get the grouped and sorted tickets based on the current options\r\n  const groupedAndSortedTickets = groupAndSortTickets();\r\n\r\n\r\n  const todoTickets = tickets.filter((ticket) => ticket.status === 'Todo');\r\n  const inProgressTickets = tickets.filter((ticket) => ticket.status === 'In progress');\r\n  const doneTickets = tickets.filter((ticket) => ticket.status === 'Done');\r\n  return (\r\n    <div className=\"kanban-board\">\r\n      {/* Render columns based on grouped and sorted tickets */}\r\n      {Object.entries(groupedAndSortedTickets).map(([groupTitle, groupTickets]) => (\r\n        <KanbanColumn key={groupTitle} title={groupTitle} tickets={groupTickets} users={users} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KanbanBoard;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC;AACA,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAO,gCAAgC;AAGvC,SAASC,aAAa,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC,IAAI;IAAEC,cAAc;IAAEC;EAAe,CAAC,GAAGT,UAAU,CAACE,aAAa,CAAC;EAC1E,MAAM;IAAEQ,OAAO;IAAEC;EAAM,CAAC,GAAGJ,IAAI;;EAG/B;EACA,MAAMK,mBAAmB,GAAGA,CAAA,KAAM;IAEhCC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9CD,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEL,cAAc,CAAC;IACtD;IACA,MAAMM,cAAc,GAAGL,OAAO,CAACM,MAAM,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACzD,MAAMC,QAAQ,GAAGD,MAAM,CAACV,cAAc,CAAC;MACvCS,OAAO,CAACE,QAAQ,CAAC,GAAGF,OAAO,CAACE,QAAQ,CAAC,IAAI,EAAE;MAC3CF,OAAO,CAACE,QAAQ,CAAC,CAACC,IAAI,CAACF,MAAM,CAAC;MAC9B,OAAOD,OAAO;IAChB,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEN;IACDI,MAAM,CAACC,IAAI,CAACP,cAAc,CAAC,CAACQ,OAAO,CAAEJ,QAAQ,IAAK;MAC/C,MAAMK,KAAK,GAAGT,cAAc,CAACI,QAAQ,CAAC;MACtCK,KAAK,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACnB,QAAQlB,cAAc;UACpB,KAAK,UAAU;YACb,MAAMmB,SAAS,GAAGC,QAAQ,CAACH,CAAC,CAACI,QAAQ,EAAE,EAAE,CAAC;YAC1C,MAAMC,SAAS,GAAGF,QAAQ,CAACF,CAAC,CAACG,QAAQ,EAAE,EAAE,CAAC;YAE1C,OAAOC,SAAS,GAAGH,SAAS;UAC9B,KAAK,OAAO;YACV;YACA,OAAOF,CAAC,CAACM,KAAK,CAACC,aAAa,CAACN,CAAC,CAACK,KAAK,CAAC;UACvC;YACE,OAAO,CAAC;UAAE;QACd;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF,OAAOjB,cAAc;EACvB,CAAC;;EAED;EACA,MAAMmB,uBAAuB,GAAGtB,mBAAmB,CAAC,CAAC;EAGrD,MAAMuB,WAAW,GAAGzB,OAAO,CAAC0B,MAAM,CAAElB,MAAM,IAAKA,MAAM,CAACmB,MAAM,KAAK,MAAM,CAAC;EACxE,MAAMC,iBAAiB,GAAG5B,OAAO,CAAC0B,MAAM,CAAElB,MAAM,IAAKA,MAAM,CAACmB,MAAM,KAAK,aAAa,CAAC;EACrF,MAAME,WAAW,GAAG7B,OAAO,CAAC0B,MAAM,CAAElB,MAAM,IAAKA,MAAM,CAACmB,MAAM,KAAK,MAAM,CAAC;EACxE,oBACEjC,OAAA;IAAKoC,SAAS,EAAC,cAAc;IAAAC,QAAA,EAE1BpB,MAAM,CAACqB,OAAO,CAACR,uBAAuB,CAAC,CAACS,GAAG,CAAC,CAAC,CAACC,UAAU,EAAEC,YAAY,CAAC,kBACtEzC,OAAA,CAACH,YAAY;MAAkB+B,KAAK,EAAEY,UAAW;MAAClC,OAAO,EAAEmC,YAAa;MAAClC,KAAK,EAAEA;IAAM,GAAnEiC,UAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA2D,CACzF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC3C,EAAA,CAvDID,WAAW;AAAA6C,EAAA,GAAX7C,WAAW;AAyDjB,eAAeA,WAAW;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}