{"ast":null,"code":"import React from'react';import KanbanCard from'../KanbanCard/KanbanCard';import'../KanbanColumn/KanbanColumn.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const KanbanColumn=_ref=>{var _users$find;let{title,tickets,users,groupingOption}=_ref;const getCountForTitle=currentTitle=>{return tickets.filter(ticket=>{if(groupingOption==='user'){const user=users.find(user=>user.id===currentTitle);return user&&ticket.userId===user.id;}else if(groupingOption==='status'){return ticket.status===currentTitle;}else if(groupingOption==='priority'){console.log('currentTitle:',currentTitle);console.log('ticket.priority:',ticket.priority);return String(ticket.priority)===currentTitle;}else{return ticket.title===currentTitle;}}).length;};return/*#__PURE__*/_jsxs(\"div\",{className:\"kanban-column\",children:[/*#__PURE__*/_jsx(\"h2\",{children:groupingOption==='user'?\"\".concat((_users$find=users.find(user=>user.id===title))===null||_users$find===void 0?void 0:_users$find.name,\" (\").concat(getCountForTitle(title),\")\"):\"\".concat(title,\" (\").concat(getCountForTitle(title),\")\")}),tickets.map(ticket=>{const user=users.find(user=>user.id===ticket.userId);// Ensure that the ticket has a userId and the corresponding user is found\nif(ticket.userId&&user){return/*#__PURE__*/_jsx(KanbanCard,{ticket:ticket,user:user},ticket.id);}// Handle the case where userId is missing or the user is not found\nreturn null;})]});};export default KanbanColumn;","map":{"version":3,"names":["React","KanbanCard","jsx","_jsx","jsxs","_jsxs","KanbanColumn","_ref","_users$find","title","tickets","users","groupingOption","getCountForTitle","currentTitle","filter","ticket","user","find","id","userId","status","console","log","priority","String","length","className","children","concat","name","map"],"sources":["D:/kanban-board/src/components/KanbanColumn/KanbanColumn.jsx"],"sourcesContent":["import React from 'react';\r\nimport KanbanCard from '../KanbanCard/KanbanCard';\r\nimport '../KanbanColumn/KanbanColumn.css';\r\n\r\nconst KanbanColumn = ({ title, tickets, users, groupingOption }) => {\r\n  const getCountForTitle = (currentTitle) => {\r\n  return tickets.filter((ticket) => {\r\n    if (groupingOption === 'user') {\r\n      const user = users.find((user) => user.id === currentTitle);\r\n      return user && ticket.userId === user.id;\r\n    } else if (groupingOption === 'status') {\r\n      return ticket.status === currentTitle;\r\n    } else if (groupingOption === 'priority') {\r\n      console.log('currentTitle:', currentTitle);\r\n      console.log('ticket.priority:', ticket.priority);\r\n      return String(ticket.priority) === currentTitle;\r\n    } else {\r\n      return ticket.title === currentTitle;\r\n    }\r\n  }).length;\r\n};\r\n\r\n\r\n  return (\r\n    <div className=\"kanban-column\">\r\n      <h2>\r\n        {groupingOption === 'user'\r\n          ? `${users.find((user) => user.id === title)?.name} (${getCountForTitle(title)})`\r\n          : `${title} (${getCountForTitle(title)})`}\r\n      </h2>\r\n      {/* Render cards based on tickets */}\r\n      {tickets.map((ticket) => {\r\n        const user = users.find((user) => user.id === ticket.userId);\r\n        // Ensure that the ticket has a userId and the corresponding user is found\r\n        if (ticket.userId && user) {\r\n          return <KanbanCard key={ticket.id} ticket={ticket} user={user} />;\r\n        }\r\n\r\n        // Handle the case where userId is missing or the user is not found\r\n        return null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KanbanColumn;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,UAAU,KAAM,0BAA0B,CACjD,MAAO,kCAAkC,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE1C,KAAM,CAAAC,YAAY,CAAGC,IAAA,EAA+C,KAAAC,WAAA,IAA9C,CAAEC,KAAK,CAAEC,OAAO,CAAEC,KAAK,CAAEC,cAAe,CAAC,CAAAL,IAAA,CAC7D,KAAM,CAAAM,gBAAgB,CAAIC,YAAY,EAAK,CAC3C,MAAO,CAAAJ,OAAO,CAACK,MAAM,CAAEC,MAAM,EAAK,CAChC,GAAIJ,cAAc,GAAK,MAAM,CAAE,CAC7B,KAAM,CAAAK,IAAI,CAAGN,KAAK,CAACO,IAAI,CAAED,IAAI,EAAKA,IAAI,CAACE,EAAE,GAAKL,YAAY,CAAC,CAC3D,MAAO,CAAAG,IAAI,EAAID,MAAM,CAACI,MAAM,GAAKH,IAAI,CAACE,EAAE,CAC1C,CAAC,IAAM,IAAIP,cAAc,GAAK,QAAQ,CAAE,CACtC,MAAO,CAAAI,MAAM,CAACK,MAAM,GAAKP,YAAY,CACvC,CAAC,IAAM,IAAIF,cAAc,GAAK,UAAU,CAAE,CACxCU,OAAO,CAACC,GAAG,CAAC,eAAe,CAAET,YAAY,CAAC,CAC1CQ,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAEP,MAAM,CAACQ,QAAQ,CAAC,CAChD,MAAO,CAAAC,MAAM,CAACT,MAAM,CAACQ,QAAQ,CAAC,GAAKV,YAAY,CACjD,CAAC,IAAM,CACL,MAAO,CAAAE,MAAM,CAACP,KAAK,GAAKK,YAAY,CACtC,CACF,CAAC,CAAC,CAACY,MAAM,CACX,CAAC,CAGC,mBACErB,KAAA,QAAKsB,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC5BzB,IAAA,OAAAyB,QAAA,CACGhB,cAAc,GAAK,MAAM,IAAAiB,MAAA,EAAArB,WAAA,CACnBG,KAAK,CAACO,IAAI,CAAED,IAAI,EAAKA,IAAI,CAACE,EAAE,GAAKV,KAAK,CAAC,UAAAD,WAAA,iBAAvCA,WAAA,CAAyCsB,IAAI,OAAAD,MAAA,CAAKhB,gBAAgB,CAACJ,KAAK,CAAC,SAAAoB,MAAA,CACzEpB,KAAK,OAAAoB,MAAA,CAAKhB,gBAAgB,CAACJ,KAAK,CAAC,KAAG,CACzC,CAAC,CAEJC,OAAO,CAACqB,GAAG,CAAEf,MAAM,EAAK,CACvB,KAAM,CAAAC,IAAI,CAAGN,KAAK,CAACO,IAAI,CAAED,IAAI,EAAKA,IAAI,CAACE,EAAE,GAAKH,MAAM,CAACI,MAAM,CAAC,CAC5D;AACA,GAAIJ,MAAM,CAACI,MAAM,EAAIH,IAAI,CAAE,CACzB,mBAAOd,IAAA,CAACF,UAAU,EAAiBe,MAAM,CAAEA,MAAO,CAACC,IAAI,CAAEA,IAAK,EAAtCD,MAAM,CAACG,EAAiC,CAAC,CACnE,CAEA;AACA,MAAO,KAAI,CACb,CAAC,CAAC,EACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAb,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}