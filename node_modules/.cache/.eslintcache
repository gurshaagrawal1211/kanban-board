[{"D:\\kanban-board\\src\\index.js":"1","D:\\kanban-board\\src\\components\\KanbanBoard\\KanbanBoard.jsx":"2","D:\\kanban-board\\src\\components\\KanbanCard\\KanbanCard.jsx":"3","D:\\kanban-board\\src\\components\\KanbanColumn\\KanbanColumn.jsx":"4","D:\\kanban-board\\src\\App.js":"5","D:\\kanban-board\\src\\components\\DisplayButton\\DisplayButton.jsx":"6"},{"size":166,"mtime":1700374813918,"results":"7","hashOfConfig":"8"},{"size":2463,"mtime":1700318006215,"results":"9","hashOfConfig":"8"},{"size":784,"mtime":1700297794650,"results":"10","hashOfConfig":"8"},{"size":1617,"mtime":1700375683861,"results":"11","hashOfConfig":"8"},{"size":3480,"mtime":1700375503047,"results":"12","hashOfConfig":"8"},{"size":693,"mtime":1700290945359,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"vgxd80",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},"D:\\kanban-board\\src\\index.js",[],[],["37","38","39","40","41","42"],"D:\\kanban-board\\src\\components\\KanbanBoard\\KanbanBoard.jsx",["43","44","45"],[],"// KanbanBoard.js\r\nimport React, { useContext } from 'react';\r\n// import KanbanColumn from './KanbanColumn';\r\nimport KanbanColumn from '../KanbanColumn/KanbanColumn';\r\nimport '../KanbanBoard/KanbanBoard.css'\r\n\r\n\r\nimport { KanbanContext } from '../../App';\r\n\r\nconst KanbanBoard = () => {\r\n  const { data, groupingOption, orderingOption } = useContext(KanbanContext);\r\n  const { tickets, users } = data;\r\n\r\n  \r\n  // Implement logic to group and sort tickets based on options\r\n  const groupAndSortTickets = () => {\r\n\r\n   \r\n    // Group tickets based on the current grouping option\r\n    const groupedTickets = tickets.reduce((grouped, ticket) => {\r\n       let groupKey;\r\n    if (groupingOption === 'user') {\r\n      groupKey = ticket.userId || 'Unknown User'; // Use 'Unknown User' if userId is missing\r\n      \r\n    } else {\r\n      groupKey = ticket[groupingOption];\r\n    }\r\n      grouped[groupKey] = grouped[groupKey] || [];\r\n      grouped[groupKey].push(ticket);\r\n      return grouped;\r\n    }, {});\r\n\r\n    // Sort tickets within each group based on the current sorting option\r\n   Object.keys(groupedTickets).forEach((groupKey) => {\r\n      const group = groupedTickets[groupKey];\r\n      group.sort((a, b) => {\r\n        switch (orderingOption) {\r\n          case 'priority':\r\n            const priorityA = parseInt(a.priority, 10);\r\n            const priorityB = parseInt(b.priority, 10);\r\n\r\n            return priorityB - priorityA;\r\n          case 'title':\r\n            // Sort by title in ascending order\r\n            return a.title.localeCompare(b.title);\r\n          default:\r\n            return 0; // Default to no sorting\r\n        }\r\n      });\r\n    });\r\n\r\n    return groupedTickets;\r\n  };\r\n\r\n  // Get the grouped and sorted tickets based on the current options\r\n  const groupedAndSortedTickets = groupAndSortTickets();\r\n\r\n\r\n  const todoTickets = tickets.filter((ticket) => ticket.status === 'Todo');\r\n  const inProgressTickets = tickets.filter((ticket) => ticket.status === 'In progress');\r\n  const doneTickets = tickets.filter((ticket) => ticket.status === 'Done');\r\n  return (\r\n    <div className=\"kanban-board\">\r\n      {/* Render columns based on grouped and sorted tickets */}\r\n      {Object.entries(groupedAndSortedTickets).map(([groupTitle, groupTickets]) => (\r\n        <KanbanColumn key={groupTitle} title={groupTitle} tickets={groupTickets} users={users} groupingOption={groupingOption} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KanbanBoard;\r\n","D:\\kanban-board\\src\\components\\KanbanCard\\KanbanCard.jsx",[],[],"D:\\kanban-board\\src\\components\\KanbanColumn\\KanbanColumn.jsx",[],[],"D:\\kanban-board\\src\\App.js",["46","47","48"],[],"import React, { useState, useEffect, createContext } from 'react';\nimport KanbanBoard from './components/KanbanBoard/KanbanBoard';\nimport './App.css';\nimport DisplayButton from './components/DisplayButton/DisplayButton';\n\nexport const KanbanContext = createContext();\n\nconst App = () => {\n\n  useEffect(() => {\n    console.log(Number(1));\n  }, []);\n  const [data, setData] = useState({\n    tickets: [],\n    users: [],\n  });\n  const [loading, setLoading] = useState(true); // Added loading state\n  const [displayOptionsVisible, setDisplayOptionsVisible] = useState(false);\n  const [groupingOption, setGroupingOption] = useState('status');\n  const [orderingOption, setOrderingOption] = useState('priority');\n\n\n  useEffect(() => {\n   \n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://api.quicksell.co/v1/internal/frontend-assignment ');\n        const jsonData = await response.json();\n        setData(jsonData);\n        \n       \n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n      \n    };\n    \n    fetchData();\n  }, []);\n\n\n  useEffect(() => {\n    const kanbanBoardData = JSON.parse(localStorage.getItem('kanban-board')) || {};\n    setGroupingOption(kanbanBoardData.groupingOption || 'status');\n    setOrderingOption(kanbanBoardData.orderingOption || 'priority');\n  }, []);\n\n  useEffect(() => {\n    // Save to local storage whenever these options change\n    localStorage.setItem('kanban-board', JSON.stringify({ groupingOption, orderingOption }));\n  }, [groupingOption, orderingOption]);\n\n  const handleDisplayButtonClick = () => {\n    setDisplayOptionsVisible(!displayOptionsVisible);\n  };\n\n  const handleGroupingOptionChange = (option) => {\n    setGroupingOption(option);\n  };\n\n  const handleOrderingOptionChange = (option) => { \n    setOrderingOption(option);\n  };\n  \n\n  const contextValue = {\n    data,\n    groupingOption,\n    setGroupingOption,\n    orderingOption,\n    setOrderingOption\n  };\n\n\n  return (\n     <KanbanContext.Provider value={contextValue}>\n       <div className=\"app\">\n        <header>\n          <div className=\"display-container\">\n            <button  onClick={handleDisplayButtonClick}>Display</button>\n            {displayOptionsVisible && (\n              <div className=\"dropdown-container\">\n              <div className=\"dropdown-container-content\">\n                <h4>Grouping</h4>\n                <select\n                  value={groupingOption}\n                  onChange={(e) => handleGroupingOptionChange(e.target.value)}\n                >\n                  <option value=\"status\">Status</option>\n                  <option value=\"user\">User</option>\n                  <option value=\"priority\">Priority</option>\n                  {/* Add more options as needed */}\n                </select>\n              </div>\n\n\n              <div className=\"dropdown-container-content\">\n                <h4>Ordering</h4>\n                <select\n                  value={orderingOption}\n                  onChange={(e) => handleOrderingOptionChange(e.target.value)}\n                >\n                  <option value=\"priority\">Priority</option>\n                  <option value=\"title\">Title</option>\n                  {/* Add more options as needed */}\n                </select>\n              </div>\n              \n              </div>\n            )}\n          </div>\n        </header>\n        <KanbanBoard />\n      </div>\n     </KanbanContext.Provider>\n  );\n};\n\nexport default App;\n\n","D:\\kanban-board\\src\\components\\DisplayButton\\DisplayButton.jsx",["49","50","51","52","53"],[],"import React, { useState } from 'react';\r\nimport { KanbanContext } from '../../App';\r\nimport '../DisplayButton/displayButton.css'\r\n\r\nconst DisplayButton = () => {\r\n  const { groupingOption, setGroupingOption, displayOption, setDisplayOption, statusOptions } = React.useContext(KanbanContext);\r\n  const [selectedStatus, setSelectedStatus] = useState(displayOption || statusOptions[0]);\r\n\r\n  const handleGroupingChange = (event) => {\r\n    setGroupingOption(event.target.value);\r\n  };\r\n\r\n  const handleDisplayChange = (event) => {\r\n    setDisplayOption(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"display-button\">\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayButton;\r\n",["54","55","56","57","58","59"],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":59,"column":9,"nodeType":"74","messageId":"75","endLine":59,"endColumn":20},{"ruleId":"72","severity":1,"message":"76","line":60,"column":9,"nodeType":"74","messageId":"75","endLine":60,"endColumn":26},{"ruleId":"72","severity":1,"message":"77","line":61,"column":9,"nodeType":"74","messageId":"75","endLine":61,"endColumn":20},{"ruleId":"72","severity":1,"message":"78","line":4,"column":8,"nodeType":"74","messageId":"75","endLine":4,"endColumn":21},{"ruleId":"72","severity":1,"message":"79","line":17,"column":10,"nodeType":"74","messageId":"75","endLine":17,"endColumn":17},{"ruleId":"72","severity":1,"message":"80","line":17,"column":19,"nodeType":"74","messageId":"75","endLine":17,"endColumn":29},{"ruleId":"72","severity":1,"message":"81","line":6,"column":11,"nodeType":"74","messageId":"75","endLine":6,"endColumn":25},{"ruleId":"72","severity":1,"message":"82","line":7,"column":10,"nodeType":"74","messageId":"75","endLine":7,"endColumn":24},{"ruleId":"72","severity":1,"message":"83","line":7,"column":26,"nodeType":"74","messageId":"75","endLine":7,"endColumn":43},{"ruleId":"72","severity":1,"message":"84","line":9,"column":9,"nodeType":"74","messageId":"75","endLine":9,"endColumn":29},{"ruleId":"72","severity":1,"message":"85","line":13,"column":9,"nodeType":"74","messageId":"75","endLine":13,"endColumn":28},{"ruleId":"60","replacedBy":"86"},{"ruleId":"62","replacedBy":"87"},{"ruleId":"64","replacedBy":"88"},{"ruleId":"66","replacedBy":"89"},{"ruleId":"68","replacedBy":"90"},{"ruleId":"70","replacedBy":"91"},"dot-location",[],"new-parens",[],"no-mixed-operators",[],"no-new-object",["92"],"no-whitespace-before-property",[],"rest-spread-spacing",[],"no-unused-vars","'todoTickets' is assigned a value but never used.","Identifier","unusedVar","'inProgressTickets' is assigned a value but never used.","'doneTickets' is assigned a value but never used.","'DisplayButton' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'groupingOption' is assigned a value but never used.","'selectedStatus' is assigned a value but never used.","'setSelectedStatus' is assigned a value but never used.","'handleGroupingChange' is assigned a value but never used.","'handleDisplayChange' is assigned a value but never used.",[],[],[],["92"],[],[],"no-object-constructor"]